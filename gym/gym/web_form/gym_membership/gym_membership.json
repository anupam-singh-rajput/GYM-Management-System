{
 "allow_comments": 0,
 "allow_delete": 0,
 "allow_edit": 0,
 "allow_incomplete": 0,
 "allow_multiple": 0,
 "allow_print": 0,
 "anonymous": 0,
 "apply_document_permissions": 0,
 "button_label": "Save",
 "client_script": "frappe.web_form.after_load = () => {\n    console.log(\"\u2705 Web form loaded\");\n\n    // Update ending date when joining date or plan changes\n    frappe.web_form.on('joining_date', () => update_ending_date());\n    frappe.web_form.on('plans', () => update_ending_date());\n\n    // \ud83d\udc49 Listen for child field input events manually\n    setTimeout(() => {\n        const grid = frappe.web_form.fields_dict.metrics_update?.grid;\n        if (!grid) {\n            console.error(\"\u274c Child table grid not found\");\n            return;\n        }\n\n        // Listen to changes in height, weight, and calorie_intake\n        grid.wrapper.on('blur', 'input[data-fieldname=\"height\"], input[data-fieldname=\"weight\"], input[data-fieldname=\"calorie_intake\"]', function () {\n            const $row = $(this).closest('.grid-row');\n            const row_name = $row.attr(\"data-name\");\n            \n            if (!row_name) {\n                console.warn(\"\u26a0\ufe0f Could not get row name\");\n                return;\n            }\n\n            const rows = frappe.web_form.get_value(\"metrics_update\") || [];\n            const row = rows.find(r => r.name === row_name);\n\n            if (!row) {\n                console.warn(\"\u26a0\ufe0f Could not find row with name:\", row_name);\n                return;\n            }\n\n            let height = parseFloat(row.height);\n            let weight = parseFloat(row.weight);\n            let calorie = parseFloat(row.calorie_intake);\n\n            console.log(\"\ud83d\udcdd Row:\", row_name);\n            console.log(\"\u27a1\ufe0f Height:\", height);\n            console.log(\"\u27a1\ufe0f Weight:\", weight);\n            console.log(\"\u27a1\ufe0f Calorie Intake:\", calorie);\n\n            if (!height || !weight || !calorie || height === 0) {\n                console.log(\"\u26a0\ufe0f Missing or invalid input(s) for BMI calculation\");\n                return;\n            }\n\n            // \ud83d\udccc Sample formula using calorie intake\n            let bmi = (weight / (height * height)) + (calorie / 1000);\n\n            row.bmi = bmi.toFixed(2);\n            console.log(\"\u2705 Calculated BMI (with calorie):\", row.bmi);\n\n            // Set the updated row back to the Web Form\n            frappe.web_form.set_value(\"metrics_update\", rows).then(() => {\n                console.log(\"\u2705 BMI updated in the form\");\n            });\n        });\n\n        console.log(\"\u2705 Listeners for height, weight, and calorie_intake are attached\");\n    }, 500);\n    \n    //-----------------------------------------------------------------------------\n    \n    //--------------------------------------------------------------------------------\n    \n};\n\n//--------------------------------------------------------------------------\n// frappe.web_form.after_load = () => {\n//     console.log(\"\u2705 Gym WebForm JS Loaded\");\n\n//     // \ud83d\udd01 Listen to specialization field change\n//     frappe.web_form.on('specialization', () => {\n//         const specialization = frappe.web_form.get_value(\"specialization\");\n//         console.log(\"\ud83d\udd04 Specialization Selected:\", specialization);\n\n//         if (!specialization) {\n//             console.warn(\"\u26a0\ufe0f No specialization selected\");\n//             return;\n//         }\n\n//         // \ud83d\udd01 Call backend\n//         frappe.call({\n//             method: \"gym.gym.api.get_filtered_trainers\",\n//             args: {\n//                 doctype: \"TrainerResgistration\",\n//                 txt: \"\",\n//                 searchfield: \"name1\",\n//                 start: 0,\n//                 page_len: 20,\n//                 filters: JSON.stringify({ specialization })\n//             },\n//             callback: function (r) {\n//                 console.log(\"\u2705 API Response:\", r.message);\n//             },\n//             error: function (err) {\n//                 console.error(\"\u274c API Error:\", err);\n//             }\n//         });\n//     });\n// };\n\n//-------------------------------------------------------------------------\n  frappe.web_form.after_load = () => {\n    console.log(\"\u2705 Gym WebForm JS Loaded\");\n\n    frappe.web_form.on('specialization', () => {\n        const specialization = frappe.web_form.get_value(\"specialization\");\n        console.log(\"\ud83d\udd04 Specialization Selected:\", specialization);\n\n        if (!specialization) {\n            console.warn(\"\u26a0\ufe0f No specialization selected\");\n            return;\n        }\n\n        frappe.call({\n            method: \"gym.gym.api.get_filtered_trainers\",\n            args: {\n                doctype: \"TrainerResgistration\",\n                txt: \"\",\n                searchfield: \"name1\",\n                start: 0,\n                page_len: 20,\n                filters: JSON.stringify({ specialization })\n            },\n            callback: function (r) {\n                console.log(\"\u2705 API Response:\", r.message);\n\n                const trainerSelect = document.querySelector('select[data-fieldname=\"trainer\"]');\n                if (!trainerSelect) {\n                    console.warn(\"Trainer select field not found\");\n                    return;\n                }\n\n                // Clear existing options\n                trainerSelect.innerHTML = \"\";\n\n                if (r.message && r.message.length > 0) {\n                    r.message.forEach(opt => {\n                        const optionElem = document.createElement(\"option\");\n                        optionElem.value = opt.value || opt.name || opt.label || \"\"; // fallback keys if needed\n                        optionElem.textContent = opt.label || opt.value || opt.name || \"\";\n                        trainerSelect.appendChild(optionElem);\n                    });\n                } else {\n                    // Agar koi trainer nahi mila to ek default option daal sakte hain\n                    const optionElem = document.createElement(\"option\");\n                    optionElem.value = \"\";\n                    optionElem.textContent = \"No trainers available\";\n                    trainerSelect.appendChild(optionElem);\n                }\n\n                // Trigger change event in case needed\n                trainerSelect.dispatchEvent(new Event('change'));\n\n                console.log(\"\u2705 Trainer options updated dynamically\");\n            },\n            error: function (err) {\n                console.error(\"\u274c API Error:\", err);\n            }\n        });\n    });\n};\n\n//----------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n\nfunction update_ending_date() {\n    let joining_date = frappe.web_form.get_value('joining_date');\n    let plan = frappe.web_form.get_value('plans');\n\n    if (!joining_date || !plan) return;\n\n    let months = 0;\n\n    if (plan.includes(\"1 Month\")) {\n        months = 1;\n    } else if (plan.includes(\"3 Months\")) {\n        months = 3;\n    } else if (plan.includes(\"1 Year\")) {\n        months = 12;\n    }\n\n    if (months > 0) {\n        const end_date = frappe.datetime.add_months(joining_date, months);\n        frappe.web_form.set_value('ending_date', frappe.datetime.obj_to_str(end_date));\n    }\n}\n\n// \u2705 Image upload preview logic (\u2b07\ufe0f Add this after all functions)\nfrappe.web_form.on('upload_image', (field, value) => {\n    if (value) {\n        const img_url = window.location.origin + value;\n\n        // Remove any existing preview image first\n        frappe.web_form.fields_dict.upload_image.$wrapper.find('img').remove();\n\n        const preview = `<img src=\"${img_url}\" style=\"max-width:200px; margin-top:10px;\">`;\n\n        // Insert preview below the field\n        frappe.web_form.fields_dict.upload_image.$wrapper.append(preview);\n    }\n});\n",
 "condition_json": "[]",
 "creation": "2025-06-30 16:54:53.772063",
 "doc_type": "GYM Membership",
 "docstatus": 0,
 "doctype": "Web Form",
 "idx": 0,
 "is_standard": 1,
 "list_columns": [],
 "login_required": 0,
 "max_attachment_size": 0,
 "modified": "2025-07-03 15:43:23.566945",
 "modified_by": "Administrator",
 "module": "GYM",
 "name": "gym-membership",
 "owner": "Administrator",
 "published": 1,
 "route": "gym-membership",
 "show_attachments": 0,
 "show_list": 0,
 "show_sidebar": 0,
 "title": "Gym Membership",
 "web_form_fields": [
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "user_info_section",
   "fieldtype": "Section Break",
   "hidden": 0,
   "label": "User Info",
   "max_length": 0,
   "max_value": 0,
   "precision": "",
   "read_only": 0,
   "reqd": 0,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "name1",
   "fieldtype": "Data",
   "hidden": 0,
   "label": "Name",
   "max_length": 0,
   "max_value": 0,
   "precision": "",
   "read_only": 0,
   "reqd": 1,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "email",
   "fieldtype": "Data",
   "hidden": 0,
   "label": "Email",
   "max_length": 0,
   "max_value": 0,
   "precision": "",
   "read_only": 0,
   "reqd": 1,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "password",
   "fieldtype": "Password",
   "hidden": 0,
   "label": "Password",
   "max_length": 0,
   "max_value": 0,
   "precision": "",
   "read_only": 0,
   "reqd": 1,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "contact",
   "fieldtype": "Phone",
   "hidden": 0,
   "label": "Contact",
   "max_length": 0,
   "max_value": 0,
   "precision": "",
   "read_only": 0,
   "reqd": 1,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "gender",
   "fieldtype": "Select",
   "hidden": 0,
   "label": "Gender",
   "max_length": 0,
   "max_value": 0,
   "options": "Male\nFemale",
   "precision": "",
   "read_only": 0,
   "reqd": 1,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "address",
   "fieldtype": "Small Text",
   "hidden": 0,
   "label": "Address",
   "max_length": 0,
   "max_value": 0,
   "precision": "",
   "read_only": 0,
   "reqd": 1,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "plans",
   "fieldtype": "Select",
   "hidden": 0,
   "label": "Membership Plan",
   "max_length": 0,
   "max_value": 0,
   "options": "1 Month >> (\u20b95000)\n3 Months  >> (\u20b99000)\n1 Year >> (\u20b914000)",
   "precision": "",
   "read_only": 0,
   "reqd": 1,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "locker",
   "fieldtype": "Int",
   "hidden": 0,
   "label": "Locker",
   "max_length": 0,
   "max_value": 0,
   "precision": "",
   "read_only": 0,
   "reqd": 0,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "available",
   "fieldtype": "Data",
   "hidden": 0,
   "label": "Available",
   "max_length": 0,
   "max_value": 0,
   "precision": "",
   "read_only": 0,
   "reqd": 0,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "section_break_mvct",
   "fieldtype": "Section Break",
   "hidden": 0,
   "label": "",
   "max_length": 0,
   "max_value": 0,
   "precision": "",
   "read_only": 0,
   "reqd": 0,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "joining_date",
   "fieldtype": "Date",
   "hidden": 0,
   "label": "Joining Date",
   "max_length": 0,
   "max_value": 0,
   "precision": "",
   "read_only": 0,
   "reqd": 1,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "column_break_gggn",
   "fieldtype": "Column Break",
   "hidden": 0,
   "label": "",
   "max_length": 0,
   "max_value": 0,
   "precision": "",
   "read_only": 0,
   "reqd": 0,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "ending_date",
   "fieldtype": "Date",
   "hidden": 0,
   "label": "Ending Date",
   "max_length": 0,
   "max_value": 0,
   "precision": "",
   "read_only": 1,
   "reqd": 0,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "section_break_lvae",
   "fieldtype": "Section Break",
   "hidden": 0,
   "label": "",
   "max_length": 0,
   "max_value": 0,
   "precision": "",
   "read_only": 0,
   "reqd": 0,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "metrics_update",
   "fieldtype": "Table",
   "hidden": 0,
   "label": "Metrics Update",
   "max_length": 0,
   "max_value": 0,
   "options": "Metrics Update",
   "precision": "",
   "read_only": 0,
   "reqd": 0,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "specialization",
   "fieldtype": "Link",
   "hidden": 0,
   "label": "Specialization",
   "max_length": 0,
   "max_value": 0,
   "options": "Categories",
   "precision": "",
   "read_only": 0,
   "reqd": 0,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "trainer",
   "fieldtype": "Select",
   "hidden": 0,
   "label": "Trainer",
   "max_length": 0,
   "max_value": 0,
   "options": "",
   "precision": "",
   "read_only": 0,
   "reqd": 0,
   "show_in_filter": 0
  }
 ]
}