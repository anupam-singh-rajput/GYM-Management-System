{
 "allow_comments": 0,
 "allow_delete": 0,
 "allow_edit": 0,
 "allow_incomplete": 0,
 "allow_multiple": 0,
 "allow_print": 0,
 "anonymous": 0,
 "apply_document_permissions": 0,
 "button_label": "Save",
 "client_script": "frappe.web_form.after_load = () => {\n    console.log(\"\u2705 Web form loaded\");\n\n    // Update ending date when joining date or plan changes\n    frappe.web_form.on('joining_date', () => update_ending_date());\n    frappe.web_form.on('plans', () => {\n        update_ending_date();\n        update_final_price();\n    });\n\n    // Locker change triggers locker description and final price update\n    frappe.web_form.on('locker', () => {\n        update_locker_description();\n        update_final_price();\n    });\n\n    // \ud83d\udc49 Manually listen for child field input events (BMI + Calories)\n    setTimeout(() => {\n        const grid = frappe.web_form.fields_dict.metrics_update?.grid;\n        if (!grid) {\n            console.error(\"\u274c Child table grid not found\");\n            return;\n        }\n\n        grid.wrapper.on('blur', 'input[data-fieldname=\"height\"], input[data-fieldname=\"weight\"], input[data-fieldname=\"calorie_intake\"]', function () {\n            const $row = $(this).closest('.grid-row');\n            const row_name = $row.attr(\"data-name\");\n\n            if (!row_name) {\n                console.warn(\"\u26a0\ufe0f Could not get row name\");\n                return;\n            }\n\n            const rows = frappe.web_form.get_value(\"metrics_update\") || [];\n            const row = rows.find(r => r.name === row_name);\n\n            if (!row) {\n                console.warn(\"\u26a0\ufe0f Could not find row with name:\", row_name);\n                return;\n            }\n\n            let height = parseFloat(row.height);\n            let weight = parseFloat(row.weight);\n            let calorie = parseFloat(row.calorie_intake);\n\n            console.log(\"\ud83d\udcdd Row:\", row_name);\n            console.log(\"\u27a1\ufe0f Height:\", height);\n            console.log(\"\u27a1\ufe0f Weight:\", weight);\n            console.log(\"\u27a1\ufe0f Calorie Intake:\", calorie);\n\n            if (!height || !weight || !calorie || height === 0) {\n                console.log(\"\u26a0\ufe0f Missing or invalid input(s) for BMI calculation\");\n                return;\n            }\n\n            let bmi = (weight / (height * height)) + (calorie / 1000);\n\n            row.bmi = bmi.toFixed(2);\n            console.log(\"\u2705 Calculated BMI (with calorie):\", row.bmi);\n\n            frappe.web_form.set_value(\"metrics_update\", rows).then(() => {\n                console.log(\"\u2705 BMI updated in the form\");\n            });\n        });\n\n        console.log(\"\u2705 Listeners for height, weight, and calorie_intake are attached\");\n    }, 500);\n\n    // \ud83d\udd04 Trainer Filtering Based on Specialization\n    frappe.web_form.on('specialization', () => {\n        const specialization = frappe.web_form.get_value(\"specialization\");\n        console.log(\"\ud83d\udd04 Specialization Selected:\", specialization);\n\n        if (!specialization) {\n            console.warn(\"\u26a0\ufe0f No specialization selected\");\n            return;\n        }\n\n        frappe.call({\n            method: \"gym.gym.api.get_filtered_trainers\",\n            args: {\n                doctype: \"TrainerResgistration\",\n                txt: \"\",\n                searchfield: \"name1\",\n                start: 0,\n                page_len: 20,\n                filters: JSON.stringify({ specialization })\n            },\n            callback: function (r) {\n                console.log(\"\u2705 API Response:\", r.message);\n\n                const trainerSelect = document.querySelector('select[data-fieldname=\"trainer\"]');\n                if (!trainerSelect) {\n                    console.warn(\"Trainer select field not found\");\n                    return;\n                }\n\n                trainerSelect.innerHTML = \"\";\n\n                if (r.message && r.message.length > 0) {\n                    r.message.forEach(opt => {\n                        const optionElem = document.createElement(\"option\");\n                        optionElem.value = opt.value || opt.name || opt.label || \"\";\n                        optionElem.textContent = opt.label || opt.value || opt.name || \"\";\n                        trainerSelect.appendChild(optionElem);\n                    });\n                } else {\n                    const optionElem = document.createElement(\"option\");\n                    optionElem.value = \"\";\n                    optionElem.textContent = \"No trainers available\";\n                    trainerSelect.appendChild(optionElem);\n                }\n\n                trainerSelect.dispatchEvent(new Event('change'));\n                console.log(\"\u2705 Trainer options updated dynamically\");\n            },\n            error: function (err) {\n                console.error(\"\u274c API Error:\", err);\n            }\n        });\n    });\n\n    // \ud83e\uddea Locker Field Debugging\n    console.log(\"\u2728 Web Form Loaded \u2014 Locker Debug Test\");\n\n    const lockerField = frappe.web_form.fields_dict.locker;\n    if (!lockerField) {\n        console.error(\"\u274c locker field not found in fields_dict\");\n    } else {\n        console.log(\"\u2705 locker field found\");\n\n        const select = lockerField.input;\n        if (select) {\n            console.log(\"\u2705 locker input element found\");\n            select.addEventListener('change', () => {\n                const value = frappe.web_form.get_value('locker');\n                console.log(\"\ud83e\uddea Locker changed \u2014 value:\", value);\n                update_locker_description();  // Call locker logic\n                update_final_price();         // Also update final price here in case direct DOM change triggered\n            });\n        } else {\n            console.error(\"\u274c locker input element not found\");\n        }\n    }\n};\n\n// \ud83d\uddd3 Auto-Update Ending Date Based on Plan\nfunction update_ending_date() {\n    let joining_date = frappe.web_form.get_value('joining_date');\n    let plan = frappe.web_form.get_value('plans');\n\n    if (!joining_date || !plan) return;\n\n    let months = 0;\n    if (plan.includes(\"1 Month\")) months = 1;\n    else if (plan.includes(\"3 Months\")) months = 3;\n    else if (plan.includes(\"1 Year\")) months = 12;\n\n    if (months > 0) {\n        const end_date = frappe.datetime.add_months(joining_date, months);\n        frappe.web_form.set_value('ending_date', frappe.datetime.obj_to_str(end_date));\n    }\n}\n\n// \ud83e\udde9 Update Locker Description\nfunction update_locker_description() {\n    let locker = frappe.web_form.get_value('locker');\n    let locker_count = parseInt(locker) || 0;\n\n    console.log(\"\ud83e\udde9 update_locker_description called with count:\", locker_count);\n\n    if (locker_count === 0) {\n        frappe.web_form.set_value('locker_description', \"\");\n    } else {\n        let locker_numbers = [];\n        for (let i = 0; i < locker_count; i++) {\n            let rand_num = Math.floor(100 + Math.random() * 900);\n            locker_numbers.push(`L${rand_num}`);\n        }\n\n        const description = \"Assigned Lockers: \" + locker_numbers.join(\", \");\n        frappe.web_form.set_value('locker_description', description);\n        console.log(\"\u2705 Locker Description Updated:\", description);\n    }\n}\n\n// \ud83d\udcb0 Calculate and update final price including plan and locker price\nfunction update_final_price() {\n    const plan = frappe.web_form.get_value('plans');\n    const lockerCount = parseInt(frappe.web_form.get_value('locker')) || 0;\n\n    // Fetch gym settings - assuming single doc \"Gym Settings\"\n    frappe.call({\n        method: 'frappe.client.get',\n        args: {\n            doctype: 'Gym Settings',\n            name: 'Gym Settings'\n        },\n        callback: function(res) {\n            if (!res.message) {\n                console.error(\"\u274c Gym Settings not found\");\n                return;\n            }\n            const settings = res.message;\n\n            // Determine base price based on selected plan\n            let basePrice = 0;\n            if (plan.includes(\"1 Month\")) basePrice = parseFloat(settings.default_price_1m);\n            else if (plan.includes(\"3 Months\")) basePrice = parseFloat(settings.default_price_3m);\n            else if (plan.includes(\"1 Year\")) basePrice = parseFloat(settings.default_price_1y);\n\n            const lockerPrice = parseFloat(settings.locker_price_1m) || 0;\n            const totalLockerPrice = lockerPrice * lockerCount;\n\n            const finalPrice = basePrice + totalLockerPrice;\n\n            frappe.web_form.set_value('final_price', finalPrice.toFixed(2));\n            console.log(`\u2705 Final price updated: ${finalPrice.toFixed(2)}`);\n        }\n    });\n}\n",
 "condition_json": "[]",
 "creation": "2025-06-30 16:54:53.772063",
 "doc_type": "GYM Membership",
 "docstatus": 0,
 "doctype": "Web Form",
 "idx": 0,
 "is_standard": 1,
 "list_columns": [],
 "login_required": 0,
 "max_attachment_size": 0,
 "modified": "2025-07-05 16:11:53.826959",
 "modified_by": "Administrator",
 "module": "GYM",
 "name": "gym-membership",
 "owner": "Administrator",
 "published": 1,
 "route": "gym-membership",
 "show_attachments": 0,
 "show_list": 0,
 "show_sidebar": 0,
 "title": "Gym Membership",
 "web_form_fields": [
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "user_info_section",
   "fieldtype": "Section Break",
   "hidden": 0,
   "label": "User Info",
   "max_length": 0,
   "max_value": 0,
   "precision": "",
   "read_only": 0,
   "reqd": 0,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "name1",
   "fieldtype": "Data",
   "hidden": 0,
   "label": "Name",
   "max_length": 0,
   "max_value": 0,
   "precision": "",
   "read_only": 0,
   "reqd": 1,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "email",
   "fieldtype": "Data",
   "hidden": 0,
   "label": "Email",
   "max_length": 0,
   "max_value": 0,
   "precision": "",
   "read_only": 0,
   "reqd": 1,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "password",
   "fieldtype": "Password",
   "hidden": 0,
   "label": "Password",
   "max_length": 0,
   "max_value": 0,
   "precision": "",
   "read_only": 0,
   "reqd": 1,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "contact",
   "fieldtype": "Phone",
   "hidden": 0,
   "label": "Contact",
   "max_length": 0,
   "max_value": 0,
   "precision": "",
   "read_only": 0,
   "reqd": 1,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "gender",
   "fieldtype": "Select",
   "hidden": 0,
   "label": "Gender",
   "max_length": 0,
   "max_value": 0,
   "options": "Male\nFemale",
   "precision": "",
   "read_only": 0,
   "reqd": 1,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "address",
   "fieldtype": "Small Text",
   "hidden": 0,
   "label": "Address",
   "max_length": 0,
   "max_value": 0,
   "precision": "",
   "read_only": 0,
   "reqd": 1,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "plans",
   "fieldtype": "Select",
   "hidden": 0,
   "label": "Membership Plan",
   "max_length": 0,
   "max_value": 0,
   "options": "1 Month >> (\u20b95000)\n3 Months  >> (\u20b99000)\n1 Year >> (\u20b914000)",
   "precision": "",
   "read_only": 0,
   "reqd": 1,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "locker",
   "fieldtype": "Select",
   "hidden": 0,
   "label": "Locker",
   "max_length": 0,
   "max_value": 0,
   "options": "0\n1\n2",
   "precision": "",
   "read_only": 0,
   "reqd": 0,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "locker_description",
   "fieldtype": "Data",
   "hidden": 0,
   "label": "Locker Description",
   "max_length": 0,
   "max_value": 0,
   "precision": "",
   "read_only": 1,
   "reqd": 0,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "section_break_mvct",
   "fieldtype": "Section Break",
   "hidden": 0,
   "label": "",
   "max_length": 0,
   "max_value": 0,
   "precision": "",
   "read_only": 0,
   "reqd": 0,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "joining_date",
   "fieldtype": "Date",
   "hidden": 0,
   "label": "Joining Date",
   "max_length": 0,
   "max_value": 0,
   "precision": "",
   "read_only": 0,
   "reqd": 1,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "column_break_gggn",
   "fieldtype": "Column Break",
   "hidden": 0,
   "label": "",
   "max_length": 0,
   "max_value": 0,
   "precision": "",
   "read_only": 0,
   "reqd": 0,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "ending_date",
   "fieldtype": "Date",
   "hidden": 0,
   "label": "Ending Date",
   "max_length": 0,
   "max_value": 0,
   "precision": "",
   "read_only": 1,
   "reqd": 0,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "section_break_lvae",
   "fieldtype": "Section Break",
   "hidden": 0,
   "label": "",
   "max_length": 0,
   "max_value": 0,
   "precision": "",
   "read_only": 0,
   "reqd": 0,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "metrics_update",
   "fieldtype": "Table",
   "hidden": 0,
   "label": "Metrics Update",
   "max_length": 0,
   "max_value": 0,
   "options": "Metrics Update",
   "precision": "",
   "read_only": 0,
   "reqd": 0,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "specialization",
   "fieldtype": "Link",
   "hidden": 0,
   "label": "Specialization",
   "max_length": 0,
   "max_value": 0,
   "options": "Categories",
   "precision": "",
   "read_only": 0,
   "reqd": 0,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "trainer",
   "fieldtype": "Select",
   "hidden": 0,
   "label": "Trainer",
   "max_length": 0,
   "max_value": 0,
   "options": "",
   "precision": "",
   "read_only": 0,
   "reqd": 0,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "final_price",
   "fieldtype": "Currency",
   "hidden": 0,
   "label": "Final Price",
   "max_length": 0,
   "max_value": 0,
   "precision": "",
   "read_only": 1,
   "reqd": 0,
   "show_in_filter": 0
  }
 ]
}